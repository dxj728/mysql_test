
1 相关术语：
    列: 一列(数据元素) 包含了相同类型的数据, 例如邮政编码的数据。
    行：一行（=元组，或记录）是一组相关的数据，例如一条用户订阅的数据。
    冗余：存储两倍数据，冗余降低了性能，但提高了数据的安全性。
    主键：主键是唯一的。一个数据表中只能包含一个主键。你可以使用主键来查询数据。
    外键：外键用于关联两个表。
    复合键：复合键（组合键）将多个列作为一个索引键，一般用于复合索引。
    索引：使用索引可快速访问数据库表中的特定信息。索引是对数据库表中一列或多列的值进行排序的一种结构。类似于书籍的目录。
    参照完整性: 参照的完整性要求关系中不允许引用不存在的实体。与实体完整性是关系模型必须满足的完整性约束条件，目的是保证数据的一致性。

2 查询：
    select 字段1,字段2
    from 表名
    [where 条件表达式]
    [limit 返回数目][ offset 数据偏移量];
    注：
        a.查询语句中你可以使用一个或者多个表，表之间使用逗号(,)分割，并使用WHERE语句来设定查询条件。
        b.SELECT 命令可以读取一条或者多条记录。
        c.你可以使用星号（*）来代替其他字段，SELECT语句会返回表的所有字段数据
        d.你可以使用 WHERE 语句来包含任何条件。
        e.你可以使用 LIMIT 属性来设定返回的记录数。
        f.你可以通过OFFSET指定SELECT语句开始查询的数据偏移量。默认情况下偏移量为0。
        g.不能使用=NULL或!=NULL在列中查找NULL值，因为均返回false。必须使用is NULL 和is not NULL运算符

3 修改：
    update 表名
    set 字段1 = 值1, 字段2 = 值2, ...
    [where 条件表达式];

4 增加：
    insert into 表名(字段1, 字段2, ...)
                values(值1, 值2, ...);
    注：
        a.如果数据是字符型，必须使用单引号或者双引号，如："value"

5 删除：
    delete from 表名
    [where 条件表达式];
    注：
        a.保留索引
        b.如果没有指定 WHERE 子句，MySQL 表中的所有记录将被删除。
        c.你可以在 WHERE 子句中指定任何条件
        d.您可以在单个表中一次性删除记录。
  清空全表(清空索引)：
    truncate table 表名;
    注：
        a.只能删除整个表的所有记录，且自动增长字段默认从1开始


6 内连接(inner join子句)
    select * from d.表1 as a
    inner join d.表2 as b
    on a.字段1 = b.字段1;
    获取两个表中字段匹配关系的记录。
    上句等同于：
    select * from d.表1 as a, d.表2 as b
    where a.字段1 = b.字段1;

7 左连接(left join子句)
    select * from 表1
    left join 表2
    on 表1.字段1 = 表2.字段2;
    获取左表(表1)的符合条件的所有数据，无论右表(表2)是否有对应值(无值为null)

8 右连接(right join子句)
    select * from 表1
    right join 表2
    on 表1.字段1 = 表2.字段2;
    读取右表(表2)中符合条件的全部数据，即便左表(表1)无对应数据(无值为null)

9 全连接：不支持
    oracle支持full join全连接，mysql不支持，但可以通过 左连接+union+右连接 实现
    非例：
        select * from 表1
        left join 表2 on 表1.字段1 = 表2.字段2
        union(联合)
        select * from 表1
        right join 表2 on 表1.字段1 = 表2.字段2;

10 联合(union子句)
    MySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。多个 SELECT 语句会删除重复的数据。

    select 字段1, 字段2, ...
    from 表1
    [where 条件表达式]
    union [ all  | distinct ]
    select 字段3, 字段4, ...
    from 表2
    [where 条件表达式];
    注：
        a. 默认状态下，UNION 操作符已经删除了重复数据，所以 DISTINCT 修饰符对结果没啥影响。
        b. 两表查询字段无关联，但必须个数对应。union只是将结果逐个输出，不涉及对应关联字段。

11 排序(order by子句)
    select 字段1, 字段2, ...
    from 表1
    [where 条件表达式]
    order by 字段1 ASC, 字段2 DESC;
    注：
        a.默认状态下，order by 字段 为升序排列
        b.多字段排序是，按照字段前后优先级排序

12 分组(group by子句)
    select 列名, 聚合函数(列名)
    from 表
    [where 条件表达式]
    group by 列名,
    注：
        a. select中的字段要么包含在group中，作为分组的依据，要么应该包含在聚合函数中

    多列分组(group by all子句)
    select 字段1, 字段2, 聚合函数(字段3)
    from 表
    [where 条件表达式]
    group by all 字段1, 字段2,
    注：
        a. 本质上是将字段1，字段2合并后的值作为分组依据
    聚合函数：
        sum(列名)	求和	　　　　
        max(列名)	最大值	　　　　
        min(列名)	最小值	　　　　
        avg(列名)	平均值	　　　　
        first(列名)	第一条记录	仅Access支持
        last(列名)	最后一条记录	仅Access支持
        count(列名)	统计记录数	注意和count(*)的区别

13 having子句
    having子句用于在where对数据进行筛选后对结果再次进行聚合筛选，通常与group by子句一起使用，以根据指定的条件过滤分组

    select 字段1, 聚合函数(字段2)
    from 表
    [where 条件表达式]
    group by all 字段1
    having 聚合函数(字段2)表达式
    注：
        a.如果省略了group by子句，则having子句的行为与where子句类似





